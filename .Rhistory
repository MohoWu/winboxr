}
module_server <- function(id) {
shiny::moduleServer(id,
function(input, output, session) {
ns <- session$ns
shiny::observeEvent(input$button, {
id <- input$button
winboxr::winbox(
inputId = sprintf("box%s", id),
title = "Test",
background = "blue",
border_width = 4,
width = NULL,
height = NULL,
x = "center",
y = "center",
max = F,
splitscreen = FALSE,
top = NULL,
right = NULL,
bottom = NULL,
left = NULL,
ui = shiny::tagList(
shiny::actionButton(ns(sprintf("update%s", id)), "update"),
shiny::div(style = "height: calc(100% - 34px);",
plotly::plotlyOutput(ns(
sprintf("plot%s", input$button)
), height = "100%"))
)
)
shiny::observeEvent(input[[sprintf("update%s", id)]], {
update_winbox(sprintf("box%s", id), "update", options = list(color = "black",
title = "New Title",
height = 300,
width = 300))
}, ignoreInit = T)
output[[sprintf("plot%s", id)]] <-
plotly::renderPlotly({
shinipsum::random_ggplotly()
})
})
shiny::observeEvent(input$box1_minimized, {
browser()
})
shiny::observeEvent(input$box1_maximized, {
browser()
})
shiny::observeEvent(input$box1_closed, {
browser()
})
shiny::observeEvent(input$browser, {
browser()
})
})
}
ui <- shiny::fluidPage(winboxr::use_winbox(),
module_ui("module_1"))
server <- function(input, output, session) {
module_server("module_1")
}
shiny::shinyApp(ui, server)
input$box1
library(magrittr)
module_ui <- function(id) {
ns <- shiny::NS(id)
shiny::tagList(
shiny::actionButton(ns("button"), label = "Open"),
shiny::actionButton(ns("browser"), label = "browser")
)
}
module_server <- function(id) {
shiny::moduleServer(id,
function(input, output, session) {
ns <- session$ns
shiny::observeEvent(input$button, {
id <- input$button
winboxr::winbox(
inputId = sprintf("box%s", id),
title = "Test",
background = "blue",
border_width = 4,
width = NULL,
height = NULL,
x = "center",
y = "center",
max = F,
splitscreen = FALSE,
top = NULL,
right = NULL,
bottom = NULL,
left = NULL,
ui = shiny::tagList(
shiny::actionButton(ns(sprintf("update%s", id)), "update"),
shiny::div(style = "height: calc(100% - 34px);",
plotly::plotlyOutput(ns(
sprintf("plot%s", input$button)
), height = "100%"))
)
)
shiny::observeEvent(input[[sprintf("update%s", id)]], {
update_winbox(sprintf("box%s", id), "update", options = list(color = "black",
title = "New Title",
height = 300,
width = 300))
}, ignoreInit = T)
output[[sprintf("plot%s", id)]] <-
plotly::renderPlotly({
shinipsum::random_ggplotly()
})
})
shiny::observeEvent(input$box1_minimized, {
browser()
})
shiny::observeEvent(input$box1_maximized, {
browser()
})
shiny::observeEvent(input$box1_closed, {
browser()
})
shiny::observeEvent(input$browser, {
browser()
})
})
}
ui <- shiny::fluidPage(winboxr::use_winbox(),
module_ui("module_1"))
server <- function(input, output, session) {
module_server("module_1")
}
shiny::shinyApp(ui, server)
library(magrittr)
module_ui <- function(id) {
ns <- shiny::NS(id)
shiny::tagList(
shiny::actionButton(ns("button"), label = "Open"),
shiny::actionButton(ns("browser"), label = "browser")
)
}
module_server <- function(id) {
shiny::moduleServer(id,
function(input, output, session) {
ns <- session$ns
shiny::observeEvent(input$button, {
id <- input$button
vars <- setdiff(names(iris), "Species")
winboxr::winbox(
inputId = sprintf("box%s", id),
title = "Test",
background = "blue",
border_width = 4,
width = NULL,
height = NULL,
x = "center",
y = "center",
max = F,
splitscreen = FALSE,
top = NULL,
right = NULL,
bottom = NULL,
left = NULL,
# ui = shiny::tagList(
#   shiny::actionButton(ns(sprintf("update%s", id)), "update"),
#   shiny::div(style = "height: calc(100% - 34px);",
#              plotly::plotlyOutput(ns(
#                sprintf("plot%s", input$button)
#              ), height = "100%"))
# )
ui= pageWithSidebar(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', vars),
selectInput('ycol', 'Y Variable', vars, selected = vars[[2]]),
numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
)
shiny::observeEvent(input[[sprintf("update%s", id)]], {
update_winbox(sprintf("box%s", id), "update", options = list(color = "black",
title = "New Title",
height = 300,
width = 300))
}, ignoreInit = T)
output[[sprintf("plot%s", id)]] <-
plotly::renderPlotly({
shinipsum::random_ggplotly()
})
})
shiny::observeEvent(input$box1_minimized, {
browser()
})
shiny::observeEvent(input$box1_maximized, {
browser()
})
shiny::observeEvent(input$box1_closed, {
browser()
})
shiny::observeEvent(input$browser, {
browser()
})
})
}
ui <- shiny::fluidPage(winboxr::use_winbox(),
module_ui("module_1"))
server <- function(input, output, session) {
module_server("module_1")
}
shiny::shinyApp(ui, server)
library(magrittr)
module_ui <- function(id) {
ns <- shiny::NS(id)
shiny::tagList(
shiny::actionButton(ns("button"), label = "Open"),
shiny::actionButton(ns("browser"), label = "browser")
)
}
module_server <- function(id) {
shiny::moduleServer(id,
function(input, output, session) {
ns <- session$ns
shiny::observeEvent(input$button, {
id <- input$button
vars <- setdiff(names(iris), "Species")
winboxr::winbox(
inputId = sprintf("box%s", id),
title = "Test",
background = "blue",
border_width = 4,
width = NULL,
height = NULL,
x = "center",
y = "center",
max = F,
splitscreen = FALSE,
top = NULL,
right = NULL,
bottom = NULL,
left = NULL,
# ui = shiny::tagList(
#   shiny::actionButton(ns(sprintf("update%s", id)), "update"),
#   shiny::div(style = "height: calc(100% - 34px);",
#              plotly::plotlyOutput(ns(
#                sprintf("plot%s", input$button)
#              ), height = "100%"))
# )
ui= pageWithSidebar(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput(ns('xcol'), 'X Variable', vars),
selectInput(ns('ycol'), 'Y Variable', vars, selected = vars[[2]]),
numericInput(ns('clusters'), 'Cluster count', 3, min = 1, max = 9)
),
mainPanel(
plotOutput(ns('plot1'))
)
)
)
shiny::observeEvent(input[[sprintf("update%s", id)]], {
update_winbox(sprintf("box%s", id), "update", options = list(color = "black",
title = "New Title",
height = 300,
width = 300))
}, ignoreInit = T)
output[[sprintf("plot%s", id)]] <-
plotly::renderPlotly({
shinipsum::random_ggplotly()
})
})
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
shiny::observeEvent(input$box1_minimized, {
browser()
})
shiny::observeEvent(input$box1_maximized, {
browser()
})
shiny::observeEvent(input$box1_closed, {
browser()
})
shiny::observeEvent(input$browser, {
browser()
})
})
}
ui <- shiny::fluidPage(winboxr::use_winbox(),
module_ui("module_1"))
server <- function(input, output, session) {
module_server("module_1")
}
shiny::shinyApp(ui, server)
library(magrittr)
module_ui <- function(id) {
ns <- shiny::NS(id)
shiny::tagList(
shiny::actionButton(ns("button"), label = "Open"),
shiny::actionButton(ns("browser"), label = "browser")
)
}
module_server <- function(id) {
shiny::moduleServer(id,
function(input, output, session) {
ns <- session$ns
shiny::observeEvent(input$button, {
id <- input$button
vars <- setdiff(names(iris), "Species")
winboxr::winbox(
inputId = sprintf("box%s", id),
title = "Test",
background = "blue",
border_width = 4,
width = NULL,
height = NULL,
x = "center",
y = "center",
max = F,
splitscreen = FALSE,
top = NULL,
right = NULL,
bottom = NULL,
left = NULL,
# ui = shiny::tagList(
#   shiny::actionButton(ns(sprintf("update%s", id)), "update"),
#   shiny::div(style = "height: calc(100% - 34px);",
#              plotly::plotlyOutput(ns(
#                sprintf("plot%s", input$button)
#              ), height = "100%"))
# )
ui= pageWithSidebar(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput(ns('xcol'), 'X Variable', vars),
selectInput(ns('ycol'), 'Y Variable', vars, selected = vars[[2]]),
numericInput(ns('clusters'), 'Cluster count', 3, min = 1, max = 9)
),
mainPanel(
plotOutput(ns('plot1'))
)
)
)
shiny::observeEvent(input[[sprintf("update%s", id)]], {
update_winbox(sprintf("box%s", id), "update", options = list(color = "black",
title = "New Title",
height = 300,
width = 300))
}, ignoreInit = T)
# output[[sprintf("plot%s", id)]] <-
#   plotly::renderPlotly({
#     shinipsum::random_ggplotly()
#
#   })
})
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
browser()
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
shiny::observeEvent(input$box1_minimized, {
browser()
})
shiny::observeEvent(input$box1_maximized, {
browser()
})
shiny::observeEvent(input$box1_closed, {
browser()
})
shiny::observeEvent(input$browser, {
browser()
})
})
}
ui <- shiny::fluidPage(winboxr::use_winbox(),
module_ui("module_1"))
server <- function(input, output, session) {
module_server("module_1")
}
shiny::shinyApp(ui, server)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
selectedData()
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
print( points(clusters()$centers, pch = 4, cex = 4, lwd = 4))
print(plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
library(magrittr)
module_ui <- function(id) {
ns <- shiny::NS(id)
shiny::tagList(
shiny::actionButton(ns("button"), label = "Open"),
shiny::actionButton(ns("browser"), label = "browser")
)
}
module_server <- function(id) {
shiny::moduleServer(id,
function(input, output, session) {
ns <- session$ns
shiny::observeEvent(input$button, {
id <- input$button
vars <- setdiff(names(iris), "Species")
winboxr::winbox(
inputId = sprintf("box%s", id),
title = "Test",
background = "blue",
border_width = 4,
width = NULL,
height = NULL,
x = "center",
y = "center",
max = F,
splitscreen = FALSE,
top = NULL,
right = NULL,
bottom = NULL,
left = NULL,
# ui = shiny::tagList(
#   shiny::actionButton(ns(sprintf("update%s", id)), "update"),
#   shiny::div(style = "height: calc(100% - 34px);",
#              plotly::plotlyOutput(ns(
#                sprintf("plot%s", input$button)
#              ), height = "100%"))
# )
ui= pageWithSidebar(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput(ns('xcol'), 'X Variable', vars),
selectInput(ns('ycol'), 'Y Variable', vars, selected = vars[[2]]),
numericInput(ns('clusters'), 'Cluster count', 3, min = 1, max = 9)
),
mainPanel(
plotOutput(ns('plot1'))
)
)
)
shiny::observeEvent(input[[sprintf("update%s", id)]], {
update_winbox(sprintf("box%s", id), "update", options = list(color = "black",
title = "New Title",
height = 300,
width = 300))
}, ignoreInit = T)
# output[[sprintf("plot%s", id)]] <-
#   plotly::renderPlotly({
#     shinipsum::random_ggplotly()
#
#   })
})
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
shiny::observeEvent(input$box1_minimized, {
browser()
})
shiny::observeEvent(input$box1_maximized, {
browser()
})
shiny::observeEvent(input$box1_closed, {
browser()
})
shiny::observeEvent(input$browser, {
browser()
})
})
}
ui <- shiny::fluidPage(winboxr::use_winbox(),
module_ui("module_1"))
server <- function(input, output, session) {
module_server("module_1")
}
shiny::shinyApp(ui, server)
devtools::check()
Sys.getenv("PATH")
